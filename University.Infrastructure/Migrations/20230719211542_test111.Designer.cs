// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using University.Infrastructure.Database;

#nullable disable

namespace University.Infrastructure.Migrations
{
    [DbContext(typeof(UniversityDbContext))]
    [Migration("20230719211542_test111")]
    partial class test111
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("University.Domain.Entities.Exams.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaximalResult")
                        .HasColumnType("int");

                    b.Property<double>("MinimalResult")
                        .HasColumnType("float");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Exam", "core");
                });

            modelBuilder.Entity("University.Domain.Entities.Faculties.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Faculty", "core");
                });

            modelBuilder.Entity("University.Domain.Entities.LecturerSubjects.LecturerSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("SubjectId");

                    b.ToTable("LecturerSubject", "core");
                });

            modelBuilder.Entity("University.Domain.Entities.Lecturers.Lecturer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("QualificationYare")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Lecturer", "core");
                });

            modelBuilder.Entity("University.Domain.Entities.StudentSubjectExams.StudentSubjectExam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaximalResult")
                        .HasColumnType("int");

                    b.Property<double>("MinimalResult")
                        .HasColumnType("float");

                    b.Property<double>("Result")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentSubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamId")
                        .IsUnique();

                    b.HasIndex("StudentSubjectId");

                    b.ToTable("StudentSubjectExam", "core");
                });

            modelBuilder.Entity("University.Domain.Entities.StudentSubjects.StudentSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StudentSubject", "core");
                });

            modelBuilder.Entity("University.Domain.Entities.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FacultyId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("GPA")
                        .HasColumnType("float");

                    b.Property<string>("GraduatedSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("FacultyId1");

                    b.ToTable("Student", "core");
                });

            modelBuilder.Entity("University.Domain.Entities.SubjectPrograms.SubjectProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BookPages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectProgram", "core");
                });

            modelBuilder.Entity("University.Domain.Entities.Subjects.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Subject", "core");
                });

            modelBuilder.Entity("University.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirtsDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrivateNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId")
                        .IsUnique()
                        .HasFilter("[LecturerId] IS NOT NULL");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.ToTable("User", "core");
                });

            modelBuilder.Entity("University.Domain.Entities.Exams.Exam", b =>
                {
                    b.HasOne("University.Domain.Entities.Subjects.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("University.Domain.Entities.LecturerSubjects.LecturerSubject", b =>
                {
                    b.HasOne("University.Domain.Entities.Lecturers.Lecturer", "Lecturer")
                        .WithMany("Subjects")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("University.Domain.Entities.Subjects.Subject", "Subject")
                        .WithMany("Lecturers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lecturer");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("University.Domain.Entities.StudentSubjectExams.StudentSubjectExam", b =>
                {
                    b.HasOne("University.Domain.Entities.Exams.Exam", "Exam")
                        .WithOne()
                        .HasForeignKey("University.Domain.Entities.StudentSubjectExams.StudentSubjectExam", "ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("University.Domain.Entities.StudentSubjects.StudentSubject", "StudentSubject")
                        .WithMany("StudentSubjectExams")
                        .HasForeignKey("StudentSubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("StudentSubject");
                });

            modelBuilder.Entity("University.Domain.Entities.StudentSubjects.StudentSubject", b =>
                {
                    b.HasOne("University.Domain.Entities.Students.Student", "Student")
                        .WithMany("Subjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("University.Domain.Entities.Subjects.Subject", "Subject")
                        .WithMany("Students")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("University.Domain.Entities.Students.Student", b =>
                {
                    b.HasOne("University.Domain.Entities.Faculties.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("University.Domain.Entities.Faculties.Faculty", null)
                        .WithMany("Students")
                        .HasForeignKey("FacultyId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("University.Domain.Entities.SubjectPrograms.SubjectProgram", b =>
                {
                    b.HasOne("University.Domain.Entities.Subjects.Subject", "Subject")
                        .WithMany("SubjectPrograms")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("University.Domain.Entities.Subjects.Subject", b =>
                {
                    b.HasOne("University.Domain.Entities.Faculties.Faculty", "Faculty")
                        .WithMany("Subjects")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("University.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("University.Domain.Entities.Lecturers.Lecturer", "Lecturer")
                        .WithOne("User")
                        .HasForeignKey("University.Domain.Entities.Users.User", "LecturerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("University.Domain.Entities.Students.Student", "Student")
                        .WithOne("User")
                        .HasForeignKey("University.Domain.Entities.Users.User", "StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Lecturer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("University.Domain.Entities.Faculties.Faculty", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("University.Domain.Entities.Lecturers.Lecturer", b =>
                {
                    b.Navigation("Subjects");

                    b.Navigation("User");
                });

            modelBuilder.Entity("University.Domain.Entities.StudentSubjects.StudentSubject", b =>
                {
                    b.Navigation("StudentSubjectExams");
                });

            modelBuilder.Entity("University.Domain.Entities.Students.Student", b =>
                {
                    b.Navigation("Subjects");

                    b.Navigation("User");
                });

            modelBuilder.Entity("University.Domain.Entities.Subjects.Subject", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Lecturers");

                    b.Navigation("Students");

                    b.Navigation("SubjectPrograms");
                });
#pragma warning restore 612, 618
        }
    }
}
